@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CMS.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Registrera konto</PageTitle>
<div class="register-page">

    <h1 class="spaced-heading">Registrera konto</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            
            <ValidationSummary class="text-danger" role="alert" />
         
              <div class="mb-3">
                <label for="first-name" class="label-bold">Förnamn</label>
                <InputText type="text" @bind-Value="Input.FirstName" class="form-control round-border" autocomplete="username" aria-required="true" placeholder="Förnamn" />
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
       
              <div class="mb-3">
                <label for="last-name" class="label-bold">Efternamn</label>
                <InputText type="text" @bind-Value="Input.LastName" class="form-control round-border" autocomplete="username" aria-required="true" placeholder="Efternamn" />
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="email" class="label-bold">E-post</label>
                <InputText id="email" @bind-Value="Input.Email" class="form-control round-border" autocomplete="username" aria-required="true" placeholder="E-post" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="label-bold">Lösenord</label>
                <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control round-border" autocomplete="new-password" aria-required="true" placeholder="Lösenord" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                    <label for="confirm-password" class="label-bold">Bekräfta lösenord</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control round-border" autocomplete="new-password" aria-required="true" placeholder="Bekräfta lösenord" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div>
                <InputCheckbox @bind-Value="Input.IsAdmin" class="darker-border-checkbox form-check-input" />
                    <label for="roleType" class="label-bold">Är du Admin?</label>
            </div>
            
            <button type="submit" class="w-100 btn btn-lg section-color label-bold round-border">Skapa konto</button>

            <div class="col-mb-3 mt-4">
                <span class="bold">Har du ett konto redan? <a class="bold no-underline" href="Account/Login"> Logga in</a></span>
            </div>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <div class="box1">
                <h1>HACKER HEROES</h1>
                <h1>CMS</h1>
            </div>
        </section>
    </div>
</div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);
        
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        
        // Assign the user to either the "Admin" or "User" role based on their selection during registration
        var roleType = Input.IsAdmin ? "Admin" : "User";
        // Assign user to the specified role and check if the operation was successful
        var roleResult = await UserManager.AddToRoleAsync(user, roleType);

        var profile = new Profile {
            UserId = userId,
            FirstName = Input.FirstName,
            LastName = Input.LastName,
            Email = Input.Email,
            CreationDate = DateOnly.FromDateTime(DateTime.Now)
         };
        using var context = DbFactory.CreateDbContext();
        await context.AddAsync(profile);
        await context.SaveChangesAsync();

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
    
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "isAdmin")]
        public bool IsAdmin { get; set; }  // Flag to register as Admin

        [Required]
        [MaxLength(100),MinLength(3)]
        [Display(Name = "Förnamn")]
        public string FirstName {get; set;} = "";
    
        [Required]
        [MaxLength(100),MinLength(3)]
        [Display(Name = "Efternamn")]
        public string LastName {get; set;} = "";
    }
}
