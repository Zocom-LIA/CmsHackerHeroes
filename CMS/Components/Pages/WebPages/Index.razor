
@page "/webpages"
@attribute [Authorize]

@using CMS.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@using CMS.Entities
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IGetCurrentUserService GetCurrentUserService
@implements IAsyncDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="my-4">Index webbsidor</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Hem</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Webbsidor</li>
                </ol>
            </nav>
            <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
                <div class="mb-2 mb-md-0">
                    @if (WebSiteId != null)

                    {
                        <a href=@($"webpages/create?WebSiteId={WebSiteId}") class="btn btn-primary">Skapa ny webbsida</a>
                    }
                </div>
            </div>

            @if (webpages == null)
            {
                <p>Laddar...</p>
            }
            else if (!webpages.Any())
            {
                <p>Inga webbsidor tillgängliga.</p>
            }
            else
            {
                <div class="table-responsive">
                    <QuickGrid Items="@webpages" Class="table table-striped table-hover">
                        <PropertyColumn Property="webpage => webpage.Title" Title="Titel" />
                        <PropertyColumn Property="webpage => webpage.Description" Title="Beskrivning" />
                        <PropertyColumn Property="webpage => webpage.CreationDate" Title="Skapad" Format="yyyy-MM-dd" />
                        <PropertyColumn Property="webpage => webpage.LastUpdated" Title="Uppdaterad" Format="yyyy-MM-dd" />

                        <TemplateColumn Title="Åtgärder" Align="Align.Center">
                            <div class="btn-group" role="group">
                                <a class="btn btn-sm btn-outline-primary" href="@($"/webpages/previewpage/{context.WebPageId}")">Förhandsgranska</a>
                                <a class="btn btn-sm btn-outline-secondary" href="@($"/contents?webpageid={context.WebPageId}")">Innehållslista</a>
                                <a class="btn btn-sm btn-outline-info" href="@($"webpages/editwebpage?webpageid={context.WebPageId}")">Redigera</a>
                                <a class="btn btn-sm btn-outline-secondary" href="@($"webpages/details?webpageid={context.WebPageId}")">Detaljer</a>
                                <a class="btn btn-sm btn-outline-danger" href="@($"webpages/delete?webpageid={context.WebPageId}")">Radera</a>
                            </div>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
            }
        </div>
    </div>
</div>


@code {
    IQueryable<WebPage> webpages = Enumerable.Empty<WebPage>().AsQueryable();

    [SupplyParameterFromQuery]

    public int? WebSiteId { get; set; }



    ApplicationDbContext context = default!;



    protected override async Task OnInitializedAsync()

    {

        context = DbFactory.CreateDbContext();



        if (WebSiteId != null)

        {

            webpages = context.WebPages.Include(w => w.WebSite)

                .Where(wp => wp.WebSiteId == WebSiteId);

        }

        else

        {

            var user = await GetCurrentUserService.GetCurrentUserAsync();

            if (user != null)

            {

                webpages = context.WebPages.Include(w => w.WebSite)

                    .Where(wp => wp.WebSite.UserId == user.Id);

            }

        }

    }



    public async ValueTask DisposeAsync()

    {

        await context.DisposeAsync();

    }
}

