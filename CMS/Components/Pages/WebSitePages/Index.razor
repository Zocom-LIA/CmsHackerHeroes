@page "/websites"
@attribute [Authorize]

@using CMS.Data
@inject IGetCurrentUserService GetCurrentUserService
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject VisitorCounterService VisitorCounterService

<PageTitle>Mina webbsites</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="text-center">Mina webbsites</h1>
            <div class="text-center">
                <a href="websites/create" class="btn btn-primary">Skapa ny webbsite</a>
            </div>
        </div>
    </div>

    @if (UserId != null && WebSitesWithVisits != null)
    {
        <div class="row">
            @foreach (var website in WebSitesWithVisits)
            {
                <div class="col-md-4 mb-4">
                    <WebSiteCard WebSite="@website.WebSite" VisitCount="@website.VisitCount" />
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center">Loading...</p>
    }
</div>

@code {
    public string UserId { get; set; }
    ApplicationDbContext context = default!;
    private List<WebSiteWithVisitCount> WebSitesWithVisits = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();
        if (user != null)
        {
            UserId = user.Id;

            context = DbFactory.CreateDbContext();

            var userWebSites = await context.WebSites
                .Include(w => w.WebPages)
                .Where(w => w.UserId == UserId)
                .ToListAsync();

            // Loop to add the VisitCount to the WebSiteWithVisitCount object, done once for each website belonging to a specific UserId. Admin implementation has to wait
            foreach (var website in userWebSites)
            {
                // Get all visits for the website
                var visits = await VisitorCounterService.GetAllPageVisitsAsync(website.WebSiteId);

                // Sum the VisitCount from the WebSiteVisit collection
                var totalVisitCount = visits.Sum(v => v.VisitCount);

                WebSitesWithVisits.Add(new WebSiteWithVisitCount
                    {
                        WebSite = website,
                        VisitCount = totalVisitCount
                    });
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await context.DisposeAsync();
    }

    private class WebSiteWithVisitCount
    {
        public WebSite WebSite { get; set; }
        public int VisitCount { get; set; }
    }
}