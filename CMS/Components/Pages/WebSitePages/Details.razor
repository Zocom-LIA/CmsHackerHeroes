@page "/websites/details"
@using CMS.Entities
@using CMS.Services
@inject IDbContextFactory<CMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject VisitorCounterService VisitorCounterService

<PageTitle>Detaljer</PageTitle>

<h1>Detaljer</h1>

<div>
    <h4>WebSida</h4>
    <hr />
    @if (website is null)
    {
    <p><em>Loading...</em></p>
    }
    else
    {
    <dl class="row">
        <dt class="col-sm-2">Titel</dt>
        <dd class="col-sm-10">@website.Title</dd>
        <dt class="col-sm-2">Beskrivning</dt>
        <dd class="col-sm-10">@website.Description</dd>
        <dt class="col-sm-2">Skapad</dt>
        <dd class="col-sm-10">@website.CreationDate</dd>
        <dt class="col-sm-2">Senast uppdaterad</dt>
        <dd class="col-sm-10">@website.LastUpdated</dd>
        <dt class="col-sm-2">Startsida</dt>
        <dd class="col-sm-10">@landingPageHeader</dd>
        <AuthorizeView Roles="Admin">
            <dt class="col-sm-2">Användar Id</dt>
            <dd class="col-sm-10">@website.UserId</dd>
        </AuthorizeView>
    </dl>
        <ConnectedWebPagesInfo WebSiteId="@WebSiteId" />
    <p>Denna sida har besökts @VisitCount gånger.</p>

        <br />
    <div>
        <a href="@($"/websites/edit?websiteid={website.WebSiteId}")">Redigera</a> |
        <a href="@($"/webpages?websiteid={website.WebSiteId}")">Webbsidor</a> |
        <a href="@($"/websites")">Tillbaka</a>
    </div>
    }
</div>



@code {
    WebSite? website;
    private int VisitCount { get; set; }
    private string CurrentPageUrl => NavigationManager.Uri;
    private string? landingPageHeader;

    [SupplyParameterFromQuery]
    public int WebSiteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        website = await context.WebSites.FirstOrDefaultAsync(m => m.WebSiteId == WebSiteId);

        if (website?.LandingPage != null)
        {
            var landingPage = await context.WebPages
                .FirstOrDefaultAsync(wp => wp.WebPageId == website.LandingPage);

            landingPageHeader = landingPage?.Header;
        }
        else if (website?.LandingPage is null)
        {
            var hasWebPages = await context.WebPages
                 .AnyAsync(wp => wp.WebSiteId == WebSiteId);

            if (hasWebPages)
            {
                landingPageHeader = "Webbsiten har ingen startsida vald";
            }
            else
            {
                landingPageHeader = "Webbsiten har inga webbsidor";
            }
        }

        if (website is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            // Increment the visit count for this specific page
            await VisitorCounterService.IncrementPageVisitAsync(WebSiteId, CurrentPageUrl);

            // Get the updated visit count for this page
            VisitCount = await VisitorCounterService.GetPageVisitCountAsync(WebSiteId, CurrentPageUrl);
        }
    }
}

