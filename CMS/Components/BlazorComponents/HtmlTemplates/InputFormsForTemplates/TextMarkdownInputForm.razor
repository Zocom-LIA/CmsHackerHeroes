@using CMS.Components.BlazorComponents.HtmlTemplates
@using CMS.Data
@using CMS.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@rendermode InteractiveServer
@namespace BlazorComponents.HtmlTemplates.InputFormsForTemplates
@inject IGetCurrentUserService GetCurrentUserService
@inject IContentService ContentService
@inherits BaseTextTemplateMarkdown

<h3>Markdown Input Form</h3>

<div>
    <EditForm Model="@this" OnValidSubmit="SaveToDatabase">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Content Name</label>
            <InputText @bind-Value="ContentName" placeholder="Enter name for content" class="form-control" />
        </div>

        <!-- Markdown Text Editor -->
        <div class="mb-3">
            <label>Markdown Content:</label>
            <MarkdownEditor @bind-Value="MarkdownContent" SpellChecker="false">
                <Toolbar>
                    <MarkdownToolbarButton Action="MarkdownAction.Bold" Icon="fa fa-bold" Title="Bold" />
                    <MarkdownToolbarButton Action="MarkdownAction.Italic" Icon="fa fa-italic" Title="Italic" />
                    <MarkdownToolbarButton Action="MarkdownAction.Code" Icon="fa fa-code" Title="Code" />
                    <MarkdownToolbarButton Action="MarkdownAction.Heading" Icon="fa fa-header" Title="Heading" />
                    <MarkdownToolbarButton Action="MarkdownAction.UnorderedList" Icon="fa fa-list-ul" Title="Unordered List" />
                    <MarkdownToolbarButton Action="MarkdownAction.OrderedList" Icon="fa fa-list-ol" Title="Ordered List" />
                </Toolbar>
            </MarkdownEditor>
        </div>

        <div style="margin-top: 10px;">
            @if (!MultiPageMode)
            {
                <button type="submit" class="btn btn-success">Save To Database</button>
            }
        </div>
    </EditForm>

    <!-- Success message -->
    @if (saveSuccessful)
    {
        <div class="alert alert-success" role="alert" style="margin-top: 20px;">
            Content saved successfully!
            <a href="/contents?webpageid=@WebPageId" class="alert-link">Click here to view all contents.</a>
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private string PreviewContent { get; set; } = string.Empty;
    private bool hasSaved = false;
    [Parameter] public bool SaveBtnClicked { get; set; }
    [Parameter] public bool MultiPageMode { get; set; }
    private bool saveSuccessful = false;

    protected override void OnParametersSet()
    {
        if (SaveBtnClicked && !hasSaved)
        {
            SaveToDatabase();
            hasSaved = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (ContentId.HasValue)
        {
            await LoadExistingContent(ContentId.Value);
        }
    }

    private class ContentData
    {
        public string MarkdownContent = string.Empty;
    }

    private async Task LoadExistingContent(int contentId)
    {
        var existingContent = await ContentService.GetContentAsync(contentId);

        if (existingContent != null)
        {
            ContentName = existingContent.ContentName;

            if (!string.IsNullOrEmpty(existingContent.ContentJson))
            {
                var contentData = JsonConvert.DeserializeObject<ContentData>(existingContent.ContentJson);
                MarkdownContent = contentData.MarkdownContent;
            }
        }
    }

    private async Task SaveToDatabase()
    {
        var user = await GetCurrentUserService.GetCurrentUserAsync();

        var contentData = new ContentData
            {
                MarkdownContent = MarkdownContent
            };

        var content = new Content
            {
                UserId = user.Id,
                ContentName = ContentName,
                WebPageId = WebPageId,
                CreationDate = DateOnly.FromDateTime(DateTime.Now),
                LastUpdated = DateOnly.FromDateTime(DateTime.Now),
                ContentJson = JsonConvert.SerializeObject(contentData),
                TemplateId = TemplateId
            };

        if (ContentId.HasValue)
        {
            content.ContentId = ContentId.Value;
            await ContentService.UpdateContentAsync(content);
        }
        else
        {
            await ContentService.SaveContentAsync(content);
        }
        saveSuccessful = true;
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdig.Markdown.ToHtml(markdown);
    }

    private void Done()
    {
        NavigationManager.NavigateTo($"/contents?webpageid={WebPageId}");
    }
}
